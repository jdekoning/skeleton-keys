---
name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    env:
      tf_dir: haunted_hause

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Check out code
        uses: actions/checkout@v2

      - name: Run Terrascan
        id: terrascan
        uses: accurics/terrascan-action@main
        with:
          iac_type: 'terraform'
          iac_version: 'v14'
          policy_type: 'aws'
          only_warn: true
          iac_dir: ${{ env.tf_dir }}

      - name: Setup Terraform
        id: setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.3

      - name: Check terraform
        id: version
        run: terraform -chdir=haunted_house version

      - name: Terraform init
        id: init
        run: terraform  -chdir=haunted_houseinit

      - name: Terraform Format
        id: fmt
        run: terraform -chdir=haunted_house fmt -check

      - name: Terraform validate
        id: validate
        run: terraform -chdir=haunted_house validate -no-color

      - name: Terraform plan
        id: plan
        run: terraform -chdir=haunted_house plan -no-color

      - name: Plan output
        id: output
        uses: actions/github-script@v3
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            ### Workspace

            \`${process.env.TF_WORKSPACE}\`

            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`hcl
            ${process.env.PLAN}
            \`\`\`

            </details>

            **Pusher**: @${{ github.actor }}
            **Action**: ${{ github.event_name }}
            `;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir=haunted_house apply -auto-approve -input=false

#      - name: Install InSpec
#        uses: actionshub/chef-install@main
#        with:
#          channel: current
#          project: inspec
#
#      - name: Assume Role
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-region: eu-west-1
#          role-to-assume: arn:aws:iam::88888888888888:role/my-github-actions-role
#          role-duration-seconds: 600
#          role-skip-session-tagging: true
#
#      - name: Infrastructure Tests
#        id: inspec
#        run: inspec exec profile/example --reporter=cli:- progress:inspec.log --input-file=profile/example/attributes-example.yml -t aws://
#        env:
#          CHEF_LICENSE: accept
#
#      - name: Infrastructure Test Results
#        id: inspec_results
#        if: always()
#        run: |
#          REPORT="$(cat inspec.log)"
#          REPORT="${REPORT//'%'/'%25'}"
#          REPORT="${REPORT//$'\n'/'%0A'}"
#          REPORT="${REPORT//$'\r'/'%0D'}"
#          echo "::set-output name=loginspec::$REPORT"
#
#      - name: Infrastructure tests Output
#        if: always()
#        uses: actions/github-script@v3
#        env:
#          INSPEC: "Inspec Test Results \n${{ steps.inspec_results.outputs.loginspec }}"
#        with:
#          github-token: ${{secrets.GITHUB_TOKEN}}
#          script: |
#            const output = `#### Inspec Tests üñå\`${{ steps.inspec.outcome }}\`
#
#            <details><summary>Show Test Results</summary>
#
#            \`\`\`
#
#            ${process.env.INSPEC}
#            \`\`\`
#
#            </details>
#
#            `;
#            github.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })
